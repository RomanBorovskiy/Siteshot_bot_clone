services:
  bot:
    container_name: bot
    restart: always
    build:
      context: .
      dockerfile: ./docker/Dockerfile
    env_file:
      - .env
    volumes:
      - bot_data:/opt/app/data
    depends_on:
      - redis_bot
      - db_bot
      - rabbitmq_bot

    networks:
      - bot-network

  worker_bot:
    container_name: worker_bot
    restart: always
    env_file:
      - .env
    build:
      context: .
      dockerfile: ./docker/Dockerfile
    command: python bot_worker.py

    volumes:
      - bot_data:/opt/app/data
    depends_on:
      - redis_bot
      - db_bot
      - rabbitmq_bot
    networks:
      - bot-network


  redis_bot:
    image: redis:7.0.5-alpine
    restart: always
    container_name: redis
    command: redis-server --requirepass ${REDIS_BOT_PASSWORD} --save 20 1
    volumes:
        - redis_bot_data:/data

    networks:
      - bot-network

  db_bot:
    image: postgres:15.1-alpine
    restart: always
    container_name: pg_db
    volumes:
      - db_bot_data:/opt/app/data

    environment:
      - POSTGRES_USER=${DB_BOT_USER}
      - POSTGRES_PASSWORD=${DB_BOT_PASSWORD}
      - POSTGRES_DB=${DB_BOT_NAME}
    networks:
      - bot-network

  rabbitmq_bot:
    restart: always
    image: rabbitmq:management
    container_name: rabbitmq_bot
    volumes:
      - rabbitmq_bot_data:/var/lib/rabbitmq
    networks:
      - bot-network

volumes:
  db_bot_data:
  redis_bot_data:
  bot_data:
  rabbitmq_bot_data:

networks:
  bot-network:
    driver: bridge